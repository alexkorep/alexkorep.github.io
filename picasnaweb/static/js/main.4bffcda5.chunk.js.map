{"version":3,"sources":["estimator.js","App.js","serviceWorker.js","index.js"],"names":["filesToProcess","fileUrls","canvas","document","createElement","width","height","body","appendChild","style","display","model","topPhotos","tf","then","mdl","console","log","setFilesToProcess","files","Object","toConsumableArray","processFiles","onPhoto","onTop","pickNextPhoto","index","length","file","url","URL","createObjectURL","push","image","Image","id","src","onload","getContext","drawImage","eTensor","fromPixels","expandDims","asType","div","predValues","predict","dataSync","scorePercent","scoreDist","result","i","calcMeanScore","Array","from","score","sort","a","b","pop","setTimeout","App","_useState","useState","_useState2","slicedToArray","loaded","setLoaded","_useState3","_useState4","setIndex","_useState5","_useState6","curImage","setCurImage","_useState7","_useState8","setTopPhotos","downloadImage","newUrl","replace","window","open","percent","topPhotoCtrls","map","photo","react_default","key","alt","href","onClick","bind","download","className","type","multiple","onChange","event","target","selFiles","idx","top","Progress","max","color","value","Math","round","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4bffcda5.chunk.js","sourcesContent":["import * as tf from '@tensorflow/tfjs';\n\nlet filesToProcess = []\nlet fileUrls = []\n\nconst canvas = document.createElement('canvas')\ncanvas.width = 224\ncanvas.height = 224\ndocument.body.appendChild(canvas)\ncanvas.style.display = \"none\";\nlet model = null\n\nconst TOP_COUNT = 20\nconst topPhotos = []\n\n\nfunction calcMeanScore (scoreDist) {\n  let result = 0\n  for (let i = 1; i <= 10; i++) {\n    result += i * scoreDist[i - 1]\n  }\n  return result\n}\n\ntf.loadLayersModel('jsmodel/model.json')\n  .then((mdl) => {\n    model = mdl\n    console.log('Model loaded!')\n  })\n\nconst pickNextPhoto = (onPhoto, onTop, index) => {\n  if (!index) {\n    index = 0\n    topPhotos.length = 0\n  }\n\n  if (index >= filesToProcess.length) {\n    // We are done.\n    // TODO show done message\n    return\n  }\n\n  const file = filesToProcess[index]\n  const url = URL.createObjectURL(file)\n  fileUrls.push(url)\n\n  var image = new Image();\n  image.id = \"pic\"\n  image.src = url\n  image.onload = function() {\n    const ctx = canvas.getContext('2d')\n    ctx.drawImage(image, 0, 0, 224, 224)\n\n    const tensor = tf.browser.fromPixels(canvas)\n    const eTensor = tensor.expandDims(0).asType('float32').div(256.0)\n    const pred = model.predict(eTensor)\n\n    const predValues = pred.dataSync()\n    const predArray = Array.from(predValues)\n    const meanScore = calcMeanScore(predArray)\n    const scorePercent = meanScore*10\n    onPhoto(url, index, scorePercent)\n\n    if (\n      topPhotos.length < TOP_COUNT ||\n      topPhotos[topPhotos.length - 1].score < scorePercent\n    ) {\n      topPhotos.push({\n        url: url,\n        score: scorePercent,\n      })\n      topPhotos.sort((a, b) => (b.score - a.score))\n      while (topPhotos.length > TOP_COUNT) {\n        topPhotos.pop()\n      }\n      onTop(topPhotos)\n    }\n\n    setTimeout(() => {\n      pickNextPhoto(onPhoto, onTop, index + 1)\n    }, 10)\n  }\n}\n\nexport const setFilesToProcess = files => {\n  filesToProcess = [...files]\n}\n\nexport const processFiles = (onPhoto, onTop) => {\n  pickNextPhoto(onPhoto, onTop, 0)\n}","import React, { useState } from 'react'\n\nimport './App.css'\nimport { Progress } from 'reactstrap'\nimport { setFilesToProcess, processFiles } from './estimator'\n\nfunction App () {\n  const [loaded, setLoaded] = useState([])\n  const [index, setIndex] = useState([])\n  const [curImage, setCurImage] = useState(null)\n  const [topPhotos, setTopPhotos] = useState([])\n\n  const onChangeHandler = event => {\n    var files = event.target.files\n    const selFiles = []\n    for (let i = 0; i < files.length; i++) {\n      selFiles.push(files[i])\n    }\n    setLoaded(selFiles)\n    setFilesToProcess(selFiles)\n    processFiles((url, idx, score) => {\n      setCurImage({\n        url: url,\n        score: score\n      })\n      setIndex(idx)\n    }, top => {\n      setTopPhotos(top)\n    })\n  }\n\n  const downloadImage = function(url) {\n\n    const newUrl = url.replace(/^data:image\\/[^;]+/, 'data:application/octet-stream');\n    window.open(newUrl);\n  }\n\n  console.log(topPhotos)\n  const percent = loaded.length ? index / loaded.length * 100 : 0\n  const topPhotoCtrls = topPhotos.map(photo => (\n    <div key={photo.url}>\n      <img src={photo.url} width='320' alt='' />\n      {photo.score}%\n      <a href=\"#\" onClick={downloadImage.bind(null, photo.url)}>Download</a>\n      <a href=\"{photo.url}\" download='image.jpeg'>Download</a>\n    </div>\n  ))\n\n  return (\n    <div className='container'>\n      <div className='row'>\n        <div className='offset-md-3 col-md-6'>\n          <div className='form-group files'>\n            <label>\n              Select Your Files\n            </label>\n            <input\n              type='file'\n              className='form-control'\n              multiple\n              onChange={onChangeHandler} />\n          </div>\n          <div className='form-group'>\n            <Progress max='100' color='success' value={percent}>\n              {Math.round(percent, 2)}%\n            </Progress>\n          </div>\n          {curImage ? (\n             <div>\n               <img src={curImage.url} width='120' alt='' />\n               Score:\n               {curImage.score}%\n             </div>\n             ) : null}\n          <div>\n            {topPhotoCtrls}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}